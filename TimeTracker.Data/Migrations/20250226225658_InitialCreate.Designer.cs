// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTracker.Data;

#nullable disable

namespace TimeTracker.Data.Migrations
{
    [DbContext(typeof(TimeTrackerDbContext))]
    [Migration("20250226225658_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeTracker.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = "Engineering",
                            Email = "john.doe@example.com",
                            EmployeeNumber = "EMP001",
                            FirstName = "John",
                            HireDate = new DateTime(2021, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Doe",
                            Phone = "555-123-4567",
                            Position = "Software Developer"
                        },
                        new
                        {
                            Id = 2,
                            Department = "Marketing",
                            Email = "jane.smith@example.com",
                            EmployeeNumber = "EMP002",
                            FirstName = "Jane",
                            HireDate = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Smith",
                            Phone = "555-987-6543",
                            Position = "Marketing Specialist"
                        },
                        new
                        {
                            Id = 3,
                            Department = "Finance",
                            Email = "michael.johnson@example.com",
                            EmployeeNumber = "EMP003",
                            FirstName = "Michael",
                            HireDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Johnson",
                            Phone = "555-456-7890",
                            Position = "Financial Analyst"
                        },
                        new
                        {
                            Id = 4,
                            Department = "Human Resources",
                            Email = "emily.williams@example.com",
                            EmployeeNumber = "EMP004",
                            FirstName = "Emily",
                            HireDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Williams",
                            Phone = "555-789-0123",
                            Position = "HR Coordinator"
                        },
                        new
                        {
                            Id = 5,
                            Department = "Operations",
                            Email = "david.brown@example.com",
                            EmployeeNumber = "EMP005",
                            FirstName = "David",
                            HireDate = new DateTime(2019, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Brown",
                            Phone = "555-234-5678",
                            Position = "Operations Manager"
                        });
                });

            modelBuilder.Entity("TimeTracker.Data.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 1,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 2,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayOfWeek = 3,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayOfWeek = 4,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            DayOfWeek = 5,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            DayOfWeek = 1,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DayOfWeek = 2,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            DayOfWeek = 3,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            DayOfWeek = 4,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            DayOfWeek = 5,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            DayOfWeek = 1,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 2,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 3,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 4,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 6,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 1,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            DayOfWeek = 2,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            DayOfWeek = 3,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            DayOfWeek = 4,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            DayOfWeek = 5,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            DayOfWeek = 1,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 5,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            DayOfWeek = 3,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 5,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            DayOfWeek = 5,
                            EffectiveDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 5,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            ScheduleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TimeTracker.Data.Models.TimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClockOutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EntryType")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Project")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Task")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeEntries");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 19, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 19, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 1,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 1"
                        },
                        new
                        {
                            Id = 200,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 19, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 19, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 2,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 2"
                        },
                        new
                        {
                            Id = 300,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 19, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 19, 17, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 3,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 3"
                        },
                        new
                        {
                            Id = 400,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 19, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 19, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 4,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 4"
                        },
                        new
                        {
                            Id = 500,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 19, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 19, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 5,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 5"
                        },
                        new
                        {
                            Id = 201,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 20, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 20, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 2,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 2"
                        },
                        new
                        {
                            Id = 301,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 20, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 20, 17, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 3,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 3"
                        },
                        new
                        {
                            Id = 401,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 20, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 20, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 4,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 4"
                        },
                        new
                        {
                            Id = 501,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 20, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 20, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 5,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 5"
                        },
                        new
                        {
                            Id = 102,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 21, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 1,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 1"
                        },
                        new
                        {
                            Id = 302,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 21, 17, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 3,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 3"
                        },
                        new
                        {
                            Id = 402,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 21, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 21, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 4,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 4"
                        },
                        new
                        {
                            Id = 502,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 21, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 5,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 5"
                        },
                        new
                        {
                            Id = 105,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 24, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 24, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 1,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 1"
                        },
                        new
                        {
                            Id = 205,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 24, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 24, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 2,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 2"
                        },
                        new
                        {
                            Id = 305,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 24, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 24, 17, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 3,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 3"
                        },
                        new
                        {
                            Id = 405,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 24, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 24, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 4,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 4"
                        },
                        new
                        {
                            Id = 505,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 24, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 24, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 5,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 5"
                        },
                        new
                        {
                            Id = 206,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 25, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 25, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 2,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 2"
                        },
                        new
                        {
                            Id = 306,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 25, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 25, 17, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 3,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 3"
                        },
                        new
                        {
                            Id = 406,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 25, 8, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 25, 18, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 4,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 4"
                        },
                        new
                        {
                            Id = 506,
                            ApprovedBy = "System",
                            ApprovedDate = new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            ClockInTime = new DateTime(2025, 2, 25, 9, 0, 0, 0, DateTimeKind.Local),
                            ClockOutTime = new DateTime(2025, 2, 25, 19, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 5,
                            EntryType = 0,
                            IsApproved = true,
                            Notes = "Regular workday for employee 5"
                        });
                });

            modelBuilder.Entity("TimeTracker.Data.Models.Schedule", b =>
                {
                    b.HasOne("TimeTracker.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TimeTracker.Data.Models.TimeEntry", b =>
                {
                    b.HasOne("TimeTracker.Data.Models.Employee", "Employee")
                        .WithMany("TimeEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TimeTracker.Data.Models.Employee", b =>
                {
                    b.Navigation("TimeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
