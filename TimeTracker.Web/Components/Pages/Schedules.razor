@page "/schedules"
@using MudBlazor
@using TimeTracker.Data.Models
@using TimeTracker.Data.Repositories
@using TimeTracker.Web.Extensions
@using TimeTracker.Web.Components.Dialogs
@inject ScheduleRepository ScheduleRepository
@inject EmployeeRepository EmployeeRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Schedules - Time Tracker</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Employee Schedules</MudText>

<MudPaper Class="pa-4 mb-4">
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudSelect T="int?" Label="Employee" @bind-Value="_selectedEmployeeId">
                <MudSelectItem Value="@((int?)null)">All Employees</MudSelectItem>
                @foreach (var employee in _employees)
                {
                    <MudSelectItem Value="@employee.Id">@($"{employee.FirstName} {employee.LastName}")</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudDateRangePicker Label="Date Range" @bind-DateRange="_dateRange" />
        </MudItem>
        <MudItem xs="12" md="4" Class="d-flex align-end">
            <MudButton Variant="Variant.Filled" 
                     Color="Color.Primary" 
                     OnClick="FilterSchedules"
                     FullWidth="true">
                Apply Filters
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudGrid>
    <MudItem xs="12" Class="d-flex justify-end mb-2">
        <MudButton Variant="Variant.Filled" 
                 Color="Color.Primary" 
                 StartIcon="@Icons.Material.Filled.Add"
                 OnClick="OpenAddDialog">
            Add Schedule
        </MudButton>
    </MudItem>
</MudGrid>

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudTable Items="@_schedules" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
              LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Employee</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Start Time</MudTh>
            <MudTh>End Time</MudTh>
            <MudTh>Duration</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Employee">@GetEmployeeName(context.EmployeeId)</MudTd>
            <MudTd DataLabel="Date">@context.ScheduleDate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="Start Time">@context.StartTime.ToString("hh:mm tt")</MudTd>
            <MudTd DataLabel="End Time">@context.EndTime.ToString("hh:mm tt")</MudTd>
            <MudTd DataLabel="Duration">@FormatTimeSpan(context.EndTime - context.StartTime)</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                            Size="Size.Small"
                            Color="Color.Primary" 
                            OnClick="@(() => OpenEditDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                            Size="Size.Small"
                            Color="Color.Error" 
                            OnClick="@(() => OpenDeleteDialog(context))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>

    @if (_groupedSchedules.Any())
    {
        <MudDivider Class="my-6" />
        <MudText Typo="Typo.h5" Class="mb-4">Weekly Schedule View</MudText>

        <MudPaper Class="pa-4">
            <MudTable Items="@_groupedSchedules" Hover="true" Breakpoint="Breakpoint.None">
                <HeaderContent>
                    <MudTh>Employee</MudTh>
                    <MudTh>Monday</MudTh>
                    <MudTh>Tuesday</MudTh>
                    <MudTh>Wednesday</MudTh>
                    <MudTh>Thursday</MudTh>
                    <MudTh>Friday</MudTh>
                    <MudTh>Saturday</MudTh>
                    <MudTh>Sunday</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Employee">@context.EmployeeName</MudTd>
                    <MudTd DataLabel="Monday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Monday)</MudTd>
                    <MudTd DataLabel="Tuesday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Tuesday)</MudTd>
                    <MudTd DataLabel="Wednesday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Wednesday)</MudTd>
                    <MudTd DataLabel="Thursday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Thursday)</MudTd>
                    <MudTd DataLabel="Friday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Friday)</MudTd>
                    <MudTd DataLabel="Saturday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Saturday)</MudTd>
                    <MudTd DataLabel="Sunday">@GetScheduleTimeForDay(context.Schedules, DayOfWeek.Sunday)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
}

@code {
    private List<Schedule> _schedules = new();
    private List<Employee> _employees = new();
    private List<EmployeeScheduleGroup> _groupedSchedules = new();
    private bool _loading = true;
    private DateRange _dateRange = new(DateTime.Now.StartOfWeek(DayOfWeek.Monday), DateTime.Now.EndOfWeek(DayOfWeek.Sunday));
    private int? _selectedEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        await LoadSchedules();
    }

    private async Task LoadEmployees()
    {
        _employees = await EmployeeRepository.GetAllEmployeesAsync();
    }

    private async Task LoadSchedules()
    {
        _loading = true;
        
        var startDate = _dateRange.Start ?? DateTime.Now.StartOfWeek(DayOfWeek.Monday);
        var endDate = _dateRange.End ?? DateTime.Now.EndOfWeek(DayOfWeek.Sunday);
        
        _schedules = await ScheduleRepository.GetSchedulesInRangeAsync(startDate, endDate);
        
        if (_selectedEmployeeId.HasValue)
        {
            _schedules = _schedules.Where(s => s.EmployeeId == _selectedEmployeeId.Value).ToList();
        }
        
        GroupSchedulesByEmployee();
        
        _loading = false;
    }

    private void GroupSchedulesByEmployee()
    {
        _groupedSchedules = _schedules
            .GroupBy(s => s.EmployeeId)
            .Select(g => new EmployeeScheduleGroup
            {
                EmployeeId = g.Key,
                EmployeeName = GetEmployeeName(g.Key),
                Schedules = g.ToList()
            })
            .ToList();
    }

    private async Task FilterSchedules()
    {
        await LoadSchedules();
    }

    private string GetEmployeeName(int employeeId)
    {
        var employee = _employees.FirstOrDefault(e => e.Id == employeeId);
        return employee != null ? $"{employee.FirstName} {employee.LastName}" : "Unknown";
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        return $"{Math.Floor(timeSpan.TotalHours):00}:{timeSpan.Minutes:00}";
    }

    private string GetScheduleTimeForDay(List<Schedule> schedules, DayOfWeek dayOfWeek)
    {
        var schedule = schedules.FirstOrDefault(s => s.ScheduleDate.DayOfWeek == dayOfWeek);
        
        if (schedule == null)
        {
            return "-";
        }
        
        return $"{schedule.StartTime.ToString("h:mm tt")} - {schedule.EndTime.ToString("h:mm tt")}";
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters
        {
            { "Schedule", new Schedule { ScheduleDate = DateTime.Today } },
            { "Employees", _employees },
            { "IsEdit", false }
        };

        var dialog = await DialogService.ShowAsync<ScheduleDialog>("Add Schedule", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSchedules();
            Snackbar.Add("Schedule added successfully!", Severity.Success);
        }
    }

    private async Task OpenEditDialog(Schedule schedule)
    {
        var parameters = new DialogParameters
        {
            { "Schedule", schedule },
            { "Employees", _employees },
            { "IsEdit", true }
        };

        var dialog = await DialogService.ShowAsync<ScheduleDialog>("Edit Schedule", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSchedules();
            Snackbar.Add("Schedule updated successfully!", Severity.Success);
        }
    }

    private async Task OpenDeleteDialog(Schedule schedule)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this schedule? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ScheduleRepository.DeleteScheduleAsync(schedule.Id);
            await LoadSchedules();
            Snackbar.Add("Schedule deleted successfully!", Severity.Success);
        }
    }

    public class EmployeeScheduleGroup
    {
        public int EmployeeId { get; set; }
        public string EmployeeName { get; set; } = string.Empty;
        public List<Schedule> Schedules { get; set; } = new();
    }
}

@functions {
    // Removing duplicate extension methods as they are now defined in DateTimeExtensions.cs
} 